<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ŸÑŸàÿ≠ÿ© ÿ™ÿ≠ŸÉŸÖ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ± - ÿ®Ÿàÿ™ ÿßŸÑÿ£ŸÖÿßŸÜ</title>
    <link rel="icon" href="https://i.ibb.co/Hq8V39j/image.png" type="image/png">

    <link href="https://fonts.googleapis.com/css2?family=Cairo:wght@400;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #4caf50;
            --background-color: #1a1a1a;
            --card-background: #2c2c2c;
            --text-color: #ffffff;
            --secondary-color: #45a049;
            --hover-color: #3e8e41;
            --nav-background: #333333;
            --nav-hover: #555555;
        }

        body {
            font-family: 'Cairo', Arial, sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            margin: 0;
            padding: 0;
            min-height: 100vh;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            background-color: var(--nav-background);
            color: var(--text-color);
            padding: 0;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 30px;
        }

        .nav-logo {
            display: flex;
            align-items: center;
        }

        .nav-logo img {
            width: 40px;
            height: 40px;
            margin-right: 10px;
        }

        .nav-logo h1 {
            margin: 0;
            font-size: 1.5rem;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
        }

        .nav-links {
            display: flex;
            gap: 20px;
        }

        .nav-links a {
            color: var(--text-color);
            text-decoration: none;
            font-weight: bold;
            padding: 10px 15px;
            border-radius: 5px;
            transition: background-color 0.3s ease;
        }

        .nav-links a:hover {
            background-color: var(--nav-hover);
        }

        .language-toggle {
            background-color: var(--secondary-color);
            color: var(--text-color);
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            transition: background-color 0.3s ease;
        }

        .language-toggle:hover {
            background-color: var(--hover-color);
        }

        .server-info {
            background-color: var(--primary-color);
            padding: 30px 0;
            text-align: center;
        }

        .server-icon {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            border: 3px solid var(--text-color);
            box-shadow: 0 0 10px rgba(255,255,255,0.3);
            margin-bottom: 15px;
        }

        h2 {
            margin: 0;
            font-size: 2rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .command-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 25px;
            margin-top: 40px;
        }

        .command-card {
            background-color: var(--card-background);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 6px 12px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
        }

        .command-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 12px 24px rgba(0,0,0,0.3);
        }

        .command-name {
            font-size: 1.3rem;
            font-weight: bold;
            margin-bottom: 15px;
            color: var(--primary-color);
        }

        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .slider {
            background-color: var(--primary-color);
        }

        input:checked + .slider:before {
            transform: translateX(26px);
        }

        .protection-type {
            font-weight: bold;
            margin-top: 25px;
            margin-bottom: 15px;
            font-size: 1.4rem;
            color: var(--primary-color);
        }
    </style>
</head>
<body>
    <header>
        <nav>
            <div class="nav-logo">
                <img src="https://i.ibb.co/Hq8V39j/image.png" alt="Logo">
                <h1 class="lang-ar">ŸÑŸàÿ≠ÿ© ÿ™ÿ≠ŸÉŸÖ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±</h1>
                <h1 class="lang-en" style="display: none;">Server Dashboard</h1>
            </div>
            <div class="nav-links">
                <a href="/dashboard" class="lang-ar">ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©</a>
                <a href="/dashboard" class="lang-en" style="display: none;">Home</a>
                <a href="https://discord.gg/WYHntTJ54b" class="lang-ar">ÿßŸÑŸÖÿ≥ÿßÿπÿØÿ©</a>
                <a href="https://discord.gg/WYHntTJ54b" class="lang-en" style="display: none;">Help</a>
            </div>
            <button class="language-toggle" onclick="toggleLanguage()">
                <span class="lang-ar">English</span>
                <span class="lang-en" style="display: none;">ÿπÿ±ÿ®Ÿä</span>
            </button>
        </nav>
    </header>
    <div class="server-info">
        <img src="<%= server.icon %>" alt="<%= server.name %>" class="server-icon">
        <h2><%= server.name %></h2>
    </div>
    <main class="container">
        <div class="command-list">
            <% ['antispam', 'antiraid', 'antiscam', 'antilink'].forEach(protectionType => { %>
                <div class="command-card">
                    <div class="command-name">
                        <span class="lang-ar"><%= {
                            'antispam': 'üö´ ŸÖŸÉÿßŸÅÿ≠ÿ© ÿßŸÑÿ≥ÿ®ÿßŸÖ',
                            'antiraid': 'üõë ŸÖŸÉÿßŸÅÿ≠ÿ© ÿßŸÑÿ±ŸäÿØ',
                            'antiscam': 'üïµÔ∏è ŸÖŸÉÿßŸÅÿ≠ÿ© ÿßŸÑÿßÿ≠ÿ™ŸäÿßŸÑ',
                            'antilink': 'üîó ŸÖŸÉÿßŸÅÿ≠ÿ© ÿßŸÑÿ±Ÿàÿßÿ®ÿ∑'
                        }[protectionType] %></span>
                        <span class="lang-en" style="display: none;"><%= {
                            'antispam': 'üö´ Anti-Spam',
                            'antiraid': 'üõë Anti-Raid',
                            'antiscam': 'üïµÔ∏è Anti-Scam',
                            'antilink': 'üîó Anti-Link'
                        }[protectionType] %></span>
                    </div>
                    <p class="lang-ar"><%= {
                        'antispam': 'ÿ≠ŸÖÿßŸäÿ© ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ± ŸÖŸÜ ÿßŸÑÿ±ÿ≥ÿßÿ¶ŸÑ ÿßŸÑŸÖÿ™ŸÉÿ±ÿ±ÿ©',
                        'antiraid': 'ÿ≠ŸÖÿßŸäÿ© ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ± ŸÖŸÜ Ÿáÿ¨ŸÖÿßÿ™ ÿßŸÑÿ±ŸäÿØ',
                        'antiscam': 'ÿ≠ŸÖÿßŸäÿ© ÿßŸÑÿ£ÿπÿ∂ÿßÿ° ŸÖŸÜ ŸÖÿ≠ÿßŸàŸÑÿßÿ™ ÿßŸÑÿßÿ≠ÿ™ŸäÿßŸÑ',
                        'antilink': 'ŸÖŸÜÿπ ŸÜÿ¥ÿ± ÿßŸÑÿ±Ÿàÿßÿ®ÿ∑ ÿ∫Ÿäÿ± ÿßŸÑŸÖÿ±ÿ∫Ÿàÿ® ŸÅŸäŸáÿß'
                    }[protectionType] %></p>
                    <p class="lang-en" style="display: none;"><%= {
                        'antispam': 'Protect the server from repeated messages',
                        'antiraid': 'Protect the server from raid attacks',
                        'antiscam': 'Protect members from scam attempts',
                        'antilink': 'Prevent posting unwanted links'
                    }[protectionType] %></p>
                    <label class="toggle-switch">
                        <input type="checkbox" <%= db.get(`${guild.id}_${protectionType}`) ? 'checked' : '' %> onchange="toggleProtection('<%= protectionType %>', this.checked, '<%= guild.id %>')">
                        <span class="slider"></span>
                    </label>
                </div>
            <% }); %>
            
            <% ['antichandeldelete', 'antichanelcreate', 'antichanneledit', 'antirolecreate', 'antiroledelete', 'antiroleedit'].forEach(protectionType => { %>
                <div class="command-card">
                    <div class="command-name">
                        <span class="lang-ar"><%= {
                            'antichandeldelete': 'üóëÔ∏è ŸÖŸÉÿßŸÅÿ≠ÿ© ÿ≠ÿ∞ŸÅ ÿßŸÑŸÇŸÜŸàÿßÿ™',
                            'antichanelcreate': '‚ûï ŸÖŸÉÿßŸÅÿ≠ÿ© ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÇŸÜŸàÿßÿ™',
                            'antichanneledit': '‚úèÔ∏è ŸÖŸÉÿßŸÅÿ≠ÿ© ÿ™ÿπÿØŸäŸÑ ÿßŸÑŸÇŸÜŸàÿßÿ™',
                            'antirolecreate': 'üè∑Ô∏è ŸÖŸÉÿßŸÅÿ≠ÿ© ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ£ÿØŸàÿßÿ±',
                            'antiroledelete': 'üóëÔ∏è ŸÖŸÉÿßŸÅÿ≠ÿ© ÿ≠ÿ∞ŸÅ ÿßŸÑÿ£ÿØŸàÿßÿ±',
                            'antiroleedit': '‚úèÔ∏è ŸÖŸÉÿßŸÅÿ≠ÿ© ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ£ÿØŸàÿßÿ±'
                        }[protectionType] %></span>
                        <span class="lang-en" style="display: none;"><%= {
                            'antichandeldelete': 'üóëÔ∏è Anti-Channel Delete',
                            'antichanelcreate': '‚ûï Anti-Channel Create',
                            'antichanneledit': '‚úèÔ∏è Anti-Channel Edit',
                            'antirolecreate': 'üè∑Ô∏è Anti-Role Create',
                            'antiroledelete': 'üóëÔ∏è Anti-Role Delete',
                            'antiroleedit': '‚úèÔ∏è Anti-Role Edit'
                        }[protectionType] %></span>
                    </div>
                    <p class="lang-ar"><%= {
                        'antichandeldelete': 'ŸÖŸÜÿπ ÿ≠ÿ∞ŸÅ ÿßŸÑŸÇŸÜŸàÿßÿ™ ÿ®ÿØŸàŸÜ ÿ•ÿ∞ŸÜ',
                        'antichanelcreate': 'ŸÖŸÜÿπ ÿ•ŸÜÿ¥ÿßÿ° ŸÇŸÜŸàÿßÿ™ ÿ¨ÿØŸäÿØÿ© ÿ®ÿØŸàŸÜ ÿ™ÿµÿ±Ÿäÿ≠',
                        'antichanneledit': 'ŸÖŸÜÿπ ÿ™ÿπÿØŸäŸÑ ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑŸÇŸÜŸàÿßÿ™ ÿ®ÿØŸàŸÜ ÿ•ÿ∞ŸÜ',
                        'antirolecreate': 'ŸÖŸÜÿπ ÿ•ŸÜÿ¥ÿßÿ° ÿ£ÿØŸàÿßÿ± ÿ¨ÿØŸäÿØÿ© ÿ®ÿØŸàŸÜ ÿ™ÿµÿ±Ÿäÿ≠',
                        'antiroledelete': 'ŸÖŸÜÿπ ÿ≠ÿ∞ŸÅ ÿßŸÑÿ£ÿØŸàÿßÿ± ÿ®ÿØŸàŸÜ ÿ•ÿ∞ŸÜ',
                        'antiroleedit': 'ŸÖŸÜÿπ ÿ™ÿπÿØŸäŸÑ ÿµŸÑÿßÿ≠Ÿäÿßÿ™ ÿßŸÑÿ£ÿØŸàÿßÿ± ÿ®ÿØŸàŸÜ ÿ™ÿµÿ±Ÿäÿ≠'
                    }[protectionType] %></p>
                    <p class="lang-en" style="display: none;"><%= {
                        'antichandeldelete': 'Prevent channel deletion without permission',
                        'antichanelcreate': 'Prevent creating new channels without authorization',
                        'antichanneledit': 'Prevent editing channel settings without permission',
                        'antirolecreate': 'Prevent creating new roles without authorization',
                        'antiroledelete': 'Prevent role deletion without permission',
                        'antiroleedit': 'Prevent editing role permissions without authorization'
                    }[protectionType] %></p>
                    <label class="toggle-switch">
                        <input type="checkbox" <%= db.get(`${guild.id}_${protectionType}`) ? 'checked' : '' %> onchange="toggleProtection('<%= protectionType %>', this.checked, '<%= guild.id %>')">
                        <span class="slider"></span>
                    </label>
                </div>
            <% }); %>
            
            <% ['antiadmingrant', 'antiban', 'antikick'].forEach(protectionType => { %>
                <div class="command-card">
                    <div class="command-name">
                        <span class="lang-ar"><%= {
                            'antiadmingrant': 'üõ°Ô∏è ŸÖŸÉÿßŸÅÿ≠ÿ© ŸÖŸÜÿ≠ ÿµŸÑÿßÿ≠Ÿäÿßÿ™ ÿßŸÑÿ•ÿØÿßÿ±ÿ©',
                            'antiban': 'üî® ŸÖŸÉÿßŸÅÿ≠ÿ© ÿßŸÑÿ≠ÿ∏ÿ±',
                            'antikick': 'üë¢ ŸÖŸÉÿßŸÅÿ≠ÿ© ÿßŸÑÿ∑ÿ±ÿØ'
                        }[protectionType] %></span>
                        <span class="lang-en" style="display: none;"><%= {
                            'antiadmingrant': 'üõ°Ô∏è Anti-Admin Grant',
                            'antiban': 'üî® Anti-Ban',
                            'antikick': 'üë¢ Anti-Kick'
                        }[protectionType] %></span>
                    </div>
                    <p class="lang-ar"><%= {
                        'antiadmingrant': 'ŸÖŸÜÿπ ŸÖŸÜÿ≠ ÿµŸÑÿßÿ≠Ÿäÿßÿ™ ÿßŸÑÿ•ÿØÿßÿ±ÿ© ÿ®ÿØŸàŸÜ ÿ™ÿµÿ±Ÿäÿ≠',
                        'antiban': 'ŸÖŸÜÿπ ÿ≠ÿ∏ÿ± ÿßŸÑÿ£ÿπÿ∂ÿßÿ° ÿ®ÿØŸàŸÜ ÿ•ÿ∞ŸÜ',
                        'antikick': 'ŸÖŸÜÿπ ÿ∑ÿ±ÿØ ÿßŸÑÿ£ÿπÿ∂ÿßÿ° ÿ®ÿØŸàŸÜ ÿ™ÿµÿ±Ÿäÿ≠'
                    }[protectionType] %></p>
                    <p class="lang-en" style="display: none;"><%= {
                        'antiadmingrant': 'Prevent granting admin permissions without authorization',
                        'antiban': 'Prevent banning members without permission',
                        'antikick': 'Prevent kicking members without authorization'
                    }[protectionType] %></p>
                    <label class="toggle-switch">
                        <input type="checkbox" <%= db.get(`${guild.id}_${protectionType}`) ? 'checked' : '' %> onchange="toggleProtection('<%= protectionType %>', this.checked, '<%= guild.id %>')">
                        <span class="slider"></span>
                    </label>
                </div>
            <% }); %>
            
            <% commands.forEach(command => { %>
                <div class="command-card">
                    <div class="command-name"><%= command.name %></div>
                    <p class="lang-ar"><%= command.description %></p>
                    <p class="lang-en" style="display: none;"><%= command.descriptionEn %></p>
                    <label class="toggle-switch">
                        <input type="checkbox" <%= command.enabled ? 'checked' : '' %> onchange="toggleCommand('<%= command.name %>', this.checked, '<%= guild.id %>')">
                        <span class="slider"></span>
                    </label>
                </div>
            <% }); %>
        </div>
    </main>
    <script>
                document.onkeydown = function(e) {
            if(e.keyCode == 123) {
                return false;
            }
            if(e.ctrlKey && e.shiftKey && e.keyCode == 'I'.charCodeAt(0)) {
                return false;
            }
            if(e.ctrlKey && e.shiftKey && e.keyCode == 'C'.charCodeAt(0)) {
                return false;
            }
            if(e.ctrlKey && e.shiftKey && e.keyCode == 'J'.charCodeAt(0)) {
                return false;
            }
            if(e.ctrlKey && e.keyCode == 'U'.charCodeAt(0)) {
                return false;
            }
        }

        // ŸÖŸÜÿπ ÿßŸÑŸÜŸÇÿ± ÿ®ÿ≤ÿ± ÿßŸÑŸÖÿßŸàÿ≥ ÿßŸÑÿ£ŸäŸÖŸÜ
        document.oncontextmenu = function(e) {
            e.preventDefault();
            return false;
        }
        function toggleCommand(commandName, isEnabled, guildId) {
            fetch('/api/toggle-command', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ commandName, isEnabled, guildId }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log(`ÿ™ŸÖ ${isEnabled ? 'ÿ™ŸÅÿπŸäŸÑ' : 'ÿ™ÿπÿ∑ŸäŸÑ'} ÿßŸÑÿ£ŸÖÿ±: ${commandName}`);
                } else {
                    console.error('ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ®ÿØŸäŸÑ ÿ≠ÿßŸÑÿ© ÿßŸÑÿ£ŸÖÿ±');
                    // ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ≤ÿ± ÿ•ŸÑŸâ ÿ≠ÿßŸÑÿ™Ÿá ÿßŸÑÿ≥ÿßÿ®ŸÇÿ© ŸÅŸä ÿ≠ÿßŸÑÿ© ÿßŸÑŸÅÿ¥ŸÑ
                    const checkbox = document.querySelector(`input[onchange="toggleCommand('${commandName}', this.checked, '${guildId}')"]`);
                    if (checkbox) {
                        checkbox.checked = !isEnabled;
                    }
                }
            })
            .catch((error) => {
                console.error('ÿÆÿ∑ÿ£:', error);
                // ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ≤ÿ± ÿ•ŸÑŸâ ÿ≠ÿßŸÑÿ™Ÿá ÿßŸÑÿ≥ÿßÿ®ŸÇÿ© ŸÅŸä ÿ≠ÿßŸÑÿ© ÿ≠ÿØŸàÿ´ ÿÆÿ∑ÿ£
                const checkbox = document.querySelector(`input[onchange="toggleCommand('${commandName}', this.checked, '${guildId}')"]`);
                if (checkbox) {
                    checkbox.checked = !isEnabled;
                }
            });
        }

        function toggleProtection(protectionType, isEnabled, guildId) {
            fetch('/api/toggle-protection', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ protectionType, isEnabled, guildId }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log(`ÿ™ŸÖ ${isEnabled ? 'ÿ™ŸÅÿπŸäŸÑ' : 'ÿ™ÿπÿ∑ŸäŸÑ'} ÿßŸÑÿ≠ŸÖÿßŸäÿ©: ${protectionType}`);
                } else {
                    console.error('ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ®ÿØŸäŸÑ ÿ≠ÿßŸÑÿ© ÿßŸÑÿ≠ŸÖÿßŸäÿ©');
                    // ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ≤ÿ± ÿ•ŸÑŸâ ÿ≠ÿßŸÑÿ™Ÿá ÿßŸÑÿ≥ÿßÿ®ŸÇÿ© ŸÅŸä ÿ≠ÿßŸÑÿ© ÿßŸÑŸÅÿ¥ŸÑ
                    const checkbox = document.querySelector(`input[onchange="toggleProtection('${protectionType}', this.checked, '${guildId}')"]`);
                    if (checkbox) {
                        checkbox.checked = !isEnabled;
                    }
                }
            })
            .catch((error) => {
                console.error('ÿÆÿ∑ÿ£:', error);
                // ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ≤ÿ± ÿ•ŸÑŸâ ÿ≠ÿßŸÑÿ™Ÿá ÿßŸÑÿ≥ÿßÿ®ŸÇÿ© ŸÅŸä ÿ≠ÿßŸÑÿ© ÿ≠ÿØŸàÿ´ ÿÆÿ∑ÿ£
                const checkbox = document.querySelector(`input[onchange="toggleProtection('${protectionType}', this.checked, '${guildId}')"]`);
                if (checkbox) {
                    checkbox.checked = !isEnabled;
                }
            });
        }

        function toggleLanguage() {
            const arElements = document.querySelectorAll('.lang-ar');
            const enElements = document.querySelectorAll('.lang-en');
            arElements.forEach(el => el.style.display = el.style.display === 'none' ? '' : 'none');
            enElements.forEach(el => el.style.display = el.style.display === 'none' ? '' : 'none');
        }
    </script>
</body>
</html>
